(()=>{"use strict";var e={960:(e,t,o)=>{e.exports=o.p+"df100efc54d4645073d7.jpg"},291:(e,t,o)=>{e.exports=o.p+"8edfe6cd78e39aafc871.jpg"},822:(e,t,o)=>{e.exports=o.p+"44e6fede87f55e5327cc.jpg"},328:(e,t,o)=>{e.exports=o.p+"e463b225f0897d749d63.jpg"},705:(e,t,o)=>{e.exports=o.p+"70aac30a40409c4dbc71.jpg"},561:(e,t,o)=>{e.exports=o.p+"2e37fd0c260a298af732.jpg"}},t={};function o(s){var n=t[s];if(void 0!==n)return n.exports;var i=t[s]={exports:{}};return e[s](i,i.exports,o),i.exports}o.m=e,o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.p="",o.b=document.baseURI||self.location.href,(()=>{class e{constructor(e,t){this._config=e,this._formElement=t,console.log("FormValidator.js imported to index.js")}showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._config.inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._config.errorClass)}hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);t.textContent="",t.classList.remove(this._config.errorClass),e.classList.remove(this._config.inputErrorClass)}_checkFormValidity(){return this._inputElements.every((e=>e.validity.valid))}checkInputValidity(e){if(!e.validity.valid)return this.showInputError(e);this.hideInputError(e)}toggleButtonState(){if(!this._checkFormValidity())return this._submitButton.classList.add(this._config.inactiveButtonClass),void(this._submitButton.disabled=!0);this._submitButton.classList.remove(this._config.inactiveButtonClass),this._submitButton.disabled=!1}_setEventListeners(){this._inputElements=[...this._formElement.querySelectorAll(this._config.inputSelector)],this._submitButton=this._formElement.querySelector(this._config.submitButtonSelector),this._inputElements.forEach((e=>{e.addEventListener("input",(t=>{this.checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._setEventListeners()}}class t{constructor(e){let{popupClassSelector:t}=e;this._popupElement=document.querySelector(t),this._closePopupButton=this._popupElement.querySelector(".modal__close-icon"),console.log(this._popupElement.parentElement),console.log(this._popupElement.closest("div"))}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscCloseBound)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscCloseBound)}_handleLeftMouseClose(e){const t=e.target.classList.contains("modal");1===e.buttons&&t&&this.close()}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._handleEscCloseBound=this._handleEscClose.bind(this),this._handleLeftMouseCloseBound=this._handleLeftMouseClose.bind(this),this._popupElement.addEventListener("mousedown",this._handleLeftMouseCloseBound),this._closePopupButton.addEventListener("click",(e=>{e.preventDefault(),this.close()}))}}class s extends t{constructor(e){let{popupSelector:t,handleFormSubmit:o}=e;super({popupClassSelector:t}),this._popupFormInputs=Array.from(this._popupElement.querySelectorAll("input")),this._popupForm=this._popupElement.querySelector("form"),this._handleFormSubmit=o}open(e){super.open(),e&&this._popupFormInputs.forEach((t=>{t.value=e[t.id]}))}_submit(e){e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this._popupForm.reset(),super.close()}_getInputValues(){const e={};return this._popupFormInputs.forEach((t=>{e[t.id]=t.value})),e}setEventListeners(){super.setEventListeners(),this._submitThis=this._submit.bind(this),this._popupForm.addEventListener("submit",this._submitThis)}}const n=new URL(o(561),o.b),i=(document.querySelector(".page"),{formSelector:".modal__container",inputSelector:".modal__input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"}),r=".profile__name",l=".profile__subtitle",a={name:r,job:l},c=(document.querySelector(r),document.querySelector(l),".modal_type_profile-edit"),d=document.querySelector(c),u=(document.forms.profileForm.className,document.querySelector(".profile__edit")),p=(d.querySelector(".modal__profile-name"),d.querySelector(".modal__profile-description"),d.querySelector(".modal__save-button"),document.querySelector(".profile__button")),_=".modal_type_add-card",m=document.querySelector(_),h=(m.querySelector(".modal__title"),m.querySelector(".modal__destination-title"),m.querySelector(".modal__destination-image-URL"),document.querySelector("#card").content,".destinations.page__section"),E=(document.querySelector(h),[{link:n,name:"Yosemite Valley"},{link:o(822),name:"Lake Louise"},{link:o(960),name:"Bald Mountains"},{link:o(328),name:"Latemar"},{link:o(705),name:"Vanoise National Park"},{link:o(291),name:"Lago di Braies"}]),f=(document.querySelectorAll(".modal__close-icon"),document.forms.cardForm,".modal_type_preview"),S=document.querySelector(f);S.querySelector(".modal__image"),S.querySelector(".modal__preview-caption");class g{constructor(e,t,o){let{link:s,name:n}=e;this._name=n,this._link=s,this._cardSelector=t,this._handleImageClick=o}createCard(){return this.getView()}_setEventListeners(){this._cardImage.addEventListener("click",(e=>{this._handleImageClick(this)})),this._likeButton=this._cardElement.querySelector(".destinations__caption-icon"),this._likeButton.addEventListener("click",(()=>{this._handleLikeButton()})),this._deleteButton=this._cardElement.querySelector(".destinations__trash-icon"),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteButton()}))}_handleLikeButton(){this._likeButton.classList.toggle("destinations_caption-icon_style_liked")}_handleDeleteButton(){this._cardElement.remove(),this._cardElement=null}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".destinations__card").cloneNode(!0),this._cardElement.querySelector(".destinations__caption-text").textContent=this._name,this._cardElement.classList.add(this._name.replaceAll(" ","_")),this._cardImage=this._cardElement.querySelector(".destinations__card-image"),this._cardImage.src=this._link,this._cardImage.alt="Photo of "+this._name,this._setEventListeners(),this._cardElement}}console.log("index.js loaded"),console.log("constants.js import successful -> index.js"),new e(i,d).enableValidation(),m.classList.add("modal_type_add-destination"),m.querySelector(".modal_type_add-destination .modal__container");const y=new class{constructor(e){let{name:t,job:o}=e;this.nameElement=document.querySelector(t),this.jobElement=document.querySelector(o)}getUserInfo(){return{profile_title:this.nameElement.textContent,profile_description:this.jobElement.textContent}}setUserInfo(e){const{input1:t,input2:o}=e;this.nameElement.textContent=t,this.jobElement.textContent=o}}(a),v=new s({popupSelector:c,handleFormSubmit:e=>{e.input1=e.profile_title,delete e.profile_title,e.input2=e.profile_description,delete e.profile_description,y.setUserInfo(e)}});v.setEventListeners(),u.addEventListener("click",(e=>{v.open(y.getUserInfo())}));const L=new e(i,m);L.enableValidation();const b=new class{constructor(e,t){let{items:o,renderer:s}=e;this._items=o,this.renderer=s,this._classSelector=t,this._container=document.querySelector(t)}renderItems=()=>{this._items.forEach((e=>{const t=this.renderer(e);this._appendItem(t)}))};addItem=e=>{this._container.prepend(this.renderer(e))};_appendItem=e=>{this._container.append(e)}}({items:E,renderer:e=>new g(e,"#card",(e=>{q.open(e)})).getView()},h),q=new class extends t{constructor(e){let{popupSelector:t}=e;super({popupClassSelector:t}),this._popupImage=this._popupElement.querySelector("img"),this._popupImageName=this._popupElement.querySelector("figcaption"),super.setEventListeners()}open(e){let{_cardImage:{alt:t,src:o},_name:s}=e;this._popupImage.alt=t,this._popupImage.src=o,this._popupImageName.textContent=s,super.open()}}({popupSelector:f}),I=new s({popupSelector:_,handleFormSubmit:e=>{console.log(e),e.link=e.destination_image_URL,delete e.destination_image_URL,e.name=e.destination_title,delete e.destination_title,b.addItem(e)}});I.setEventListeners(),p.addEventListener("click",(function(e){I.open(),L.toggleButtonState()})),b.renderItems()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,