(()=>{"use strict";class e{constructor(e,t){this._config=e,this._formElement=t,console.log("FormValidator.js imported to index.js")}showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._config.inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._config.errorClass)}hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);t.textContent="",t.classList.remove(this._config.errorClass),e.classList.remove(this._config.inputErrorClass)}_checkFormValidity(){return this._inputElements.every((e=>e.validity.valid))}checkInputValidity(e){if(!e.validity.valid)return this.showInputError(e);this.hideInputError(e)}toggleButtonState(){if(!this._checkFormValidity())return this._submitButton.classList.add(this._config.inactiveButtonClass),void(this._submitButton.disabled=!0);this._submitButton.classList.remove(this._config.inactiveButtonClass),this._submitButton.disabled=!1}_setEventListeners(){this._inputElements=[...this._formElement.querySelectorAll(this._config.inputSelector)],this._submitButton=this._formElement.querySelector(this._config.submitButtonSelector),this._inputElements.forEach((e=>{e.addEventListener("input",(t=>{this.checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._setEventListeners()}}class t{constructor(e){let{popupClassSelector:t}=e;this._popupElement=document.querySelector(t),this._closePopupButton=this._popupElement.querySelector(".modal__close-icon")}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscCloseBound)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscCloseBound)}_handleLeftMouseClose(e){const t=e.target.classList.contains("modal");1===e.buttons&&t&&this.close()}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._handleEscCloseBound=this._handleEscClose.bind(this),this._handleLeftMouseCloseBound=this._handleLeftMouseClose.bind(this),this._popupElement.addEventListener("mousedown",this._handleLeftMouseCloseBound),this._closePopupButton.addEventListener("click",(e=>{e.preventDefault(),this.close()}))}}class o extends t{constructor(e){let{popupSelector:t,handleFormSubmit:o}=e;super({popupClassSelector:t}),this._popupFormInputs=Array.from(this._popupElement.querySelectorAll("input")),this._popupForm=this._popupElement.querySelector("form"),this._handleFormSubmit=o}open(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0;t&&(this.cardId=t,console.log("there is an id")),super.open(),e&&this._popupFormInputs.forEach((t=>{t.value=e[t.id]}))}_submit(e){e.preventDefault(),this.renderLoading(!0),this.cardId?(console.log(this.cardId),this._handleFormSubmit(this.cardId)):this._handleFormSubmit(this._getInputValues()),this._popupForm.reset(),super.close()}renderLoading(e){e&&(this._popupForm.querySelector('button[type="submit"]').textContent="Saving..."),this._popupForm.querySelector('button[type="submit"]').textContent="Save"}_getInputValues(){const e={};return this._popupFormInputs.forEach((t=>{e[t.id]=t.value})),e}setEventListeners(){super.setEventListeners(),this._submitThis=this._submit.bind(this),this._popupForm.addEventListener("submit",this._submitThis)}}document.querySelector(".page");const s={formSelector:".modal__container",inputSelector:".modal__input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},n=".profile__name",r=".profile__subtitle",i={name:n,job:r,avatar:".profile__image"},a=(document.querySelector(n),document.querySelector(r),".modal_type_profile-edit"),l=document.querySelector(a),c=(document.forms.profileForm.className,document.querySelector(".profile__edit")),d=document.querySelector(".profile__editImageIcon"),u=(l.querySelector(".modal__profile-name"),l.querySelector(".modal__profile-description"),l.querySelector(".modal__save-button"),".modal_type_avatar-edit"),h=document.querySelector(u),m=document.querySelector(".profile__button"),p=".modal_type_add-card",_=document.querySelector(p),g=(_.querySelector(".modal__title"),_.querySelector(".modal__destination-title"),_.querySelector(".modal__destination-image-URL"),document.querySelector("#card").content,".destinations.page__section"),f=(document.querySelector(g),document.querySelectorAll(".modal__close-icon"),document.forms.cardForm,".modal_type_preview"),S=document.querySelector(f),E=(S.querySelector(".modal__image"),S.querySelector(".modal__preview-caption"),".modal_type_delete-confirm");document.querySelector(E);class v{constructor(e,t,o,s,n){let{isLiked:r,_id:i,link:a,name:l}=e;this.isLiked=r,this._id=i,this._name=l,this._link=a,this._cardSelector=t,this._handleImageClick=o,this._removeServerCard=s,this.updateServerLike=n}createCard(){return this.getView()}_setEventListeners(){this._cardImage.addEventListener("click",(e=>{this._handleImageClick(this)})),this._likeButton.addEventListener("click",(e=>{const t=this._cardElement.querySelector("img").id,o=!("true"===e.target.value);this.updateServerLike(o,t)})),this._deleteButton=this._cardElement.querySelector(".destinations__trash-icon"),this._deleteButton.addEventListener("click",(e=>{this._removeServerCard(e.target.closest("div").querySelector("img").id)}))}handleLikeButton(){this._likeButton.classList.toggle("destinations_caption-icon_style_liked")}handleDeleteButton(){this._cardElement.remove(),this._cardElement=null}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".destinations__card").cloneNode(!0),this._likeButton=this._cardElement.querySelector(".destinations__caption-icon"),this._cardElement.querySelector(".destinations__caption-text").textContent=this._name,this._cardElement.classList.add(this._name.replaceAll(" ","_")),this._cardElement.querySelector(".destinations__caption-icon").value=this.isLiked,"true"===this._cardElement.querySelector(".destinations__caption-icon").value&&this.handleLikeButton(),this._cardImage=this._cardElement.querySelector(".destinations__card-image"),this._cardImage.id=this._id,this._cardImage.src=this._link,this._cardImage.alt="Photo of "+this._name,this._setEventListeners(),this._cardElement}}console.log("index.js loaded"),console.log("constants.js import successful -> index.js");const y=new class{constructor(e){this.baseUrl=e.baseUrl,this.headers=e.headers}getUserInfo(){return fetch(this.baseUrl+"/users/me",{headers:this.headers}).then((e=>e.ok?e.json():Promise.reject(`Error ${e.status}`))).catch((e=>{console.error(e)}))}getInitialCards(){}getCards(){return fetch(this.baseUrl+"/cards",{headers:this.headers}).then((e=>e.ok?e.json():Promise.reject(`Error ${e.status}`))).catch((e=>{console.error(e)}))}updateProfileInfo(e){let{name:t,about:o}=e;return fetch(this.baseUrl+"/users/me",{method:"PATCH",headers:this.headers,body:JSON.stringify({name:t,about:o})}).then((e=>e.ok?e.json():Promise.reject(`Error ${e.status}`))).catch((e=>{console.error(e)}))}updateProfileAvatar(e){return fetch(this.baseUrl+"/users/me/avatar",{method:"PATCH",headers:this.headers,body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(`Error ${e.status}`))).catch((e=>{console.error(e)}))}addNewCard(e){let{name:t,link:o}=e;return fetch(this.baseUrl+"/cards",{method:"POST",headers:this.headers,body:JSON.stringify({name:t,link:o})}).then((e=>e.ok?e.json():Promise.reject(`Error ${e.status}`))).catch((e=>{console.error(e)}))}deleteCard(e){return fetch(this.baseUrl+"/cards/"+e,{method:"DELETE",headers:this.headers}).then((e=>e.ok?e.ok:Promise.reject(`Error ${e.status}`))).catch((e=>{console.error(e)}))}likeCard(e){return fetch(this.baseUrl+"/cards/"+e+"/likes",{method:"PUT",headers:this.headers})}dislikeCard(e){return fetch(this.baseUrl+"/cards/"+e+"/likes",{method:"DELETE",headers:this.headers})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"71f5bc36-47ff-474a-afa7-bfcc7399d91e","Content-Type":"application/json"}}),b=new o({popupSelector:E,handleFormSubmit:e=>{console.log(e),y.deleteCard(e).then((()=>{console.log("#\\3"+e.slice(1,2)+" "+e.slice(2,e.length)),document.querySelector("#\\3"+e.slice(0,1)+" "+e.slice(1,e.length)).closest("div").remove()}))}});b.setEventListeners();const L=new class{constructor(e,t){let{renderer:o}=e;this.renderer=o,this._classSelector=t,this._container=document.querySelector(t)}renderItems=e=>{e.forEach((e=>{const t=this.renderer(e);this._appendItem(t)}))};addItem=e=>{this._container.prepend(this.renderer(e))};_appendItem=e=>{this._container.append(e)}}({renderer:e=>{const t=new v(e,"#card",(e=>{j.open(e)}),(e=>{b.open("",e)}),((e,o)=>{e?y.likeCard(o).then((()=>{t.handleLikeButton()})):y.dislikeCard(o).then((()=>{t.handleLikeButton()}))}));return t.getView()}},g);console.log([{link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg",name:"Yosemite Valley"},{link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg",name:"Lake Louise"},{link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg",name:"Bald Mountains"},{link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg",name:"Latemar"},{link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg",name:"Vanoise National Park"},{link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg",name:"Lago di Braies"}]),y.getCards().then((e=>e)).then((e=>{L.renderItems(e)})),new e(s,l).enableValidation(),_.classList.add("modal_type_add-destination"),_.querySelector(".modal_type_add-destination .modal__container");const k=new class{constructor(e,t,o){let{name:s,job:n,avatar:r}=e;this.nameElement=document.querySelector(s),this.jobElement=document.querySelector(n),this.avatarElement=document.querySelector(r),this.pullServerProfileData=t,this.updateServerProfileData=o,t().then((e=>(e.input1=e.name,delete e.name,e.input2=e.about,delete e.about,e))).then((e=>{this.setUserInfo(e)}))}getUserInfo(){return this.pullServerProfileData().then((e=>(this.nameElement.textContent=e.name,this.jobElement.textContent=e.about,{profile_title:this.nameElement.textContent,profile_description:this.jobElement.textContent})))}setUserInfo(e){if(e.input1){var{input1:t,input2:o}=e;this.nameElement.textContent=t,this.jobElement.textContent=o,e.name=e.input1,e.about=e.input2,this.updateServerProfileData(e)}e.avatar&&(this.avatarElement.src=e.avatar)}}(i,(function(){return y.getUserInfo()}),(function(e){e.name&&y.updateProfileInfo(e)})),C=new o({popupSelector:a,handleFormSubmit:e=>{e.input1=e.profile_title,delete e.profile_title,e.input2=e.profile_description,delete e.profile_description,y.updateProfileInfo({name:e.input1,about:e.input2}).then(y.getUserInfo().then((e=>{e.input1=e.name,e.input2=e.about,k.setUserInfo(e)}))).finally((()=>{C.renderLoading(!1)}))}});y.getUserInfo().then((e=>{e.input1=e.name,e.input2=e.about,k.setUserInfo(e)})),C.setEventListeners(),c.addEventListener("click",(e=>{k.getUserInfo().then((e=>{C.open(e)}))}));const I=new e(s,h);I.enableValidation();const q=new o({popupSelector:u,handleFormSubmit:e=>{y.updateProfileAvatar(e.profile_avatar).then((()=>y.getUserInfo())).then((e=>{k.setUserInfo(e)})).finally((()=>{C.renderLoading(!1)}))}});q.setEventListeners(),d.addEventListener("click",(e=>{q.open(),I.toggleButtonState()}));const w=new e(s,_);w.enableValidation();const j=new class extends t{constructor(e){let{popupSelector:t}=e;super({popupClassSelector:t}),this._popupImage=this._popupElement.querySelector("img"),this._popupImageName=this._popupElement.querySelector("figcaption"),super.setEventListeners()}open(e){let{_cardImage:{alt:t,src:o},_name:s}=e;this._popupImage.alt=t,this._popupImage.src=o,this._popupImageName.textContent=s,super.open()}}({popupSelector:f}),B=new o({popupSelector:p,handleFormSubmit:e=>{console.log(e),console.log(e),e.link=e.destination_image_URL,delete e.destination_image_URL,e.name=e.destination_title,delete e.destination_title,y.addNewCard(e).then((()=>y.getCards().then((e=>(console.log(e[0]._id),e[0]._id))).then((t=>{e._id=t,console.log("#\\3"+e._id.slice(1,2)+" "+e._id.slice(2,e._id.length)),L.addItem(e),document.querySelector("#\\3"+e._id.slice(1,2)+" "+e._id.slice(2,e._id.length))})))).finally((()=>{C.renderLoading(!1)}))}});B.setEventListeners(),m.addEventListener("click",(function(e){B.open(),w.toggleButtonState()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFBTSxHQUFHeEUsS0FDZHdFLEVBQU0sR0FBR3hFLE9BRWpCNEIsTUFBTUMsSUFDTHdELEVBQVNyRixJQUFNNkIsRUFDZjFJLFFBQVFDLElBQ04sT0FDRWlNLEVBQVNyRixJQUFJc0QsTUFBTSxFQUFHLEdBQ3RCLElBQ0ErQixFQUFTckYsSUFBSXNELE1BQU0sRUFBRytCLEVBQVNyRixJQUFJNUMsU0FFdkNtRyxFQUFZVSxRQUFRb0IsR0FDcEI3SixTQUFTaEMsY0FDUCxPQUNFNkwsRUFBU3JGLElBQUlzRCxNQUFNLEVBQUcsR0FDdEIsSUFDQStCLEVBQVNyRixJQUFJc0QsTUFBTSxFQUFHK0IsRUFBU3JGLElBQUk1QyxRQUN0QyxNQUlOc0ksU0FBUSxLQUNQRCxFQUFhL0gsZUFBYyxFQUFNLEdBQ2pDLElBSVJ3SSxFQUFvQjdKLG9CQUVwQjRDLEVBQXFCaEUsaUJBQWlCLFNBQVMsU0FBVUMsR0FDdkRnTCxFQUFvQnhLLE9BQ3BCcUssRUFBMEJ2TCxtQkFDNUIsRyIsInNvdXJjZXMiOlsid2VicGFjazovL3RyaXBsZXRlbi8uL3NyYy9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vdHJpcGxldGVuLy4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vdHJpcGxldGVuLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly90cmlwbGV0ZW4vLi9zcmMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3RyaXBsZXRlbi8uL3NyYy9jb21wb25lbnRzL0NhcmQuanMiLCJ3ZWJwYWNrOi8vdHJpcGxldGVuLy4vc3JjL3BhZ2VzL2luZGV4LmpzIiwid2VicGFjazovL3RyaXBsZXRlbi8uL3NyYy9jb21wb25lbnRzL0FwaS5qcyIsIndlYnBhY2s6Ly90cmlwbGV0ZW4vLi9zcmMvY29tcG9uZW50cy9TZWN0aW9uLmpzIiwid2VicGFjazovL3RyaXBsZXRlbi8uL3NyYy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIiwid2VicGFjazovL3RyaXBsZXRlbi8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvcm1WYWxpZGF0b3Ige1xuICBjb25zdHJ1Y3Rvcihjb25maWcsIGZvcm1FbGVtZW50KSB7XG4gICAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xuICAgIHRoaXMuX2Zvcm1FbGVtZW50ID0gZm9ybUVsZW1lbnQ7XG5cbiAgICBjb25zb2xlLmxvZyhcIkZvcm1WYWxpZGF0b3IuanMgaW1wb3J0ZWQgdG8gaW5kZXguanNcIik7XG4gIH1cblxuICBzaG93SW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpIHtcbiAgICBjb25zdCBlcnJvck1lc3NhZ2VFbGVtZW50ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgIGAjJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYFxuICAgICk7XG5cbiAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9jb25maWcuaW5wdXRFcnJvckNsYXNzKTtcbiAgICBlcnJvck1lc3NhZ2VFbGVtZW50LnRleHRDb250ZW50ID0gaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlO1xuICAgIGVycm9yTWVzc2FnZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9jb25maWcuZXJyb3JDbGFzcyk7XG4gIH1cblxuICBoaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpIHtcbiAgICBjb25zdCBlcnJvck1lc3NhZ2VFbGVtZW50ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgIGAjJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYFxuICAgICk7XG5cbiAgICBlcnJvck1lc3NhZ2VFbGVtZW50LnRleHRDb250ZW50ID0gXCJcIjtcbiAgICBlcnJvck1lc3NhZ2VFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fY29uZmlnLmVycm9yQ2xhc3MpO1xuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2NvbmZpZy5pbnB1dEVycm9yQ2xhc3MpO1xuICB9XG5cbiAgX2NoZWNrRm9ybVZhbGlkaXR5KCkge1xuICAgIHJldHVybiB0aGlzLl9pbnB1dEVsZW1lbnRzLmV2ZXJ5KFxuICAgICAgKGlucHV0RWxlbWVudCkgPT4gaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkXG4gICAgKTtcbiAgfVxuXG4gIGNoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpIHtcbiAgICBpZiAoIWlucHV0RWxlbWVudC52YWxpZGl0eS52YWxpZCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcbiAgICB9XG5cbiAgICB0aGlzLmhpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XG4gIH1cblxuICB0b2dnbGVCdXR0b25TdGF0ZSgpIHtcbiAgICBpZiAoIXRoaXMuX2NoZWNrRm9ybVZhbGlkaXR5KCkpIHtcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QuYWRkKHRoaXMuX2NvbmZpZy5pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2NvbmZpZy5pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcbiAgfVxuXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLl9pbnB1dEVsZW1lbnRzID0gW1xuICAgICAgLi4udGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9jb25maWcuaW5wdXRTZWxlY3RvciksXG4gICAgXTtcblxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICB0aGlzLl9jb25maWcuc3VibWl0QnV0dG9uU2VsZWN0b3JcbiAgICApO1xuXG4gICAgdGhpcy5faW5wdXRFbGVtZW50cy5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcbiAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKGUpID0+IHtcbiAgICAgICAgdGhpcy5jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbGVtZW50KTtcbiAgICAgICAgdGhpcy50b2dnbGVCdXR0b25TdGF0ZSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBlbmFibGVWYWxpZGF0aW9uKCkge1xuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwIHtcbiAgY29uc3RydWN0b3IoeyBwb3B1cENsYXNzU2VsZWN0b3IgfSkge1xuICAgIHRoaXMuX3BvcHVwRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocG9wdXBDbGFzc1NlbGVjdG9yKTtcbiAgICB0aGlzLl9jbG9zZVBvcHVwQnV0dG9uID1cbiAgICAgIHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19jbG9zZS1pY29uXCIpO1xuICB9XG4gIG9wZW4oKSB7XG4gICAgLy9wdWJsaWMgbWV0aG9kIHRvIG9wZW4gcG9wdXBcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIm1vZGFsX29wZW5lZFwiKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZUJvdW5kKTtcbiAgICAvL0lTU1VFICMyIFNFVEVWRU5UIExJU1RFTkVSUyBORUVEUyBUTyBCRSBQVUJMSUMgQU5EIENBTExFRCBJTiBJTkRFWC5KU1xuICB9XG5cbiAgY2xvc2UoKSB7XG4gICAgLy9wdWJsaWMgbWV0aG9kIHRvIGNsb3NlIHBvcHVwXG4gICAgdGhpcy5fcG9wdXBFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJtb2RhbF9vcGVuZWRcIik7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2VCb3VuZCk7XG4gIH1cblxuICBfaGFuZGxlTGVmdE1vdXNlQ2xvc2UoZSkge1xuICAgIGNvbnN0IGlzTW9kYWwgPSBlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJtb2RhbFwiKTtcbiAgICBpZiAoZS5idXR0b25zID09PSAxICYmIGlzTW9kYWwpIHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICBfaGFuZGxlRXNjQ2xvc2UoZSkge1xuICAgIC8vbG9vayBmb3IgZXNjYXBlIGJ1dHRvbiBwcmVzcyB3aGlsZSBtb2RhbCBpcyBvcGVuZWQgYW5kIGNsb3NlIG1vZGFsIHdoZW4gdGhlIGVzY2FwZSBidXR0b24gaXMgcHJlc3NlZFxuICAgIGlmIChlLmtleSA9PT0gXCJFc2NhcGVcIikge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8vSVNTVUUgIzIgU0VURVZFTlQgTElTVEVORVJTIE5FRURTIFRPIEJFIFBVQkxJQyBBTkQgQ0FMTEVEIElOIElOREVYLkpTXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuX2hhbmRsZUVzY0Nsb3NlQm91bmQgPSB0aGlzLl9oYW5kbGVFc2NDbG9zZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2hhbmRsZUxlZnRNb3VzZUNsb3NlQm91bmQgPSB0aGlzLl9oYW5kbGVMZWZ0TW91c2VDbG9zZS5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5fcG9wdXBFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICBcIm1vdXNlZG93blwiLFxuICAgICAgdGhpcy5faGFuZGxlTGVmdE1vdXNlQ2xvc2VCb3VuZFxuICAgICk7XG5cbiAgICB0aGlzLl9jbG9zZVBvcHVwQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwIHtcbiAgY29uc3RydWN0b3IoeyBwb3B1cFNlbGVjdG9yLCBoYW5kbGVGb3JtU3VibWl0IH0pIHtcbiAgICBzdXBlcih7IHBvcHVwQ2xhc3NTZWxlY3RvcjogcG9wdXBTZWxlY3RvciB9KTsgLy91c2VzIHBhcmVudCBwb3B1cCBjbGFzcyB0byBkZWZpbmUgdGhpcy5fcG9wdXBFbGVtZW50IGJ5IGFjY2Vzc2luZyBwYXJlbnQgY29uc3RydWN0b3JcbiAgICB0aGlzLl9wb3B1cEZvcm1JbnB1dHMgPSBBcnJheS5mcm9tKFxuICAgICAgdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFwiKVxuICAgICk7XG5cbiAgICB0aGlzLl9wb3B1cEZvcm0gPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcImZvcm1cIik7XG5cbiAgICAvL3RoaXMuX3BvcHVwRm9ybSA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19jb250YWluZXJcIik7XG5cbiAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcbiAgfVxuXG4gIG9wZW4oZGF0YSA9IHVuZGVmaW5lZCwgY2FyZElkID0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKGNhcmRJZCkge1xuICAgICAgdGhpcy5jYXJkSWQgPSBjYXJkSWQ7XG4gICAgICBjb25zb2xlLmxvZyhcInRoZXJlIGlzIGFuIGlkXCIpO1xuICAgIH1cbiAgICBzdXBlci5vcGVuKCk7IC8vY2FsbCBwYXJlbnQgb3BlbiBtZXRob2RcbiAgICBpZiAoZGF0YSkge1xuICAgICAgdGhpcy5fcG9wdXBGb3JtSW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgICAgIGlucHV0LnZhbHVlID0gZGF0YVtpbnB1dC5pZF07XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBfc3VibWl0KGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5yZW5kZXJMb2FkaW5nKHRydWUpO1xuXG4gICAgaWYgKHRoaXMuY2FyZElkKSB7XG4gICAgICBjb25zb2xlLmxvZyh0aGlzLmNhcmRJZCk7XG4gICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0KHRoaXMuY2FyZElkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCh0aGlzLl9nZXRJbnB1dFZhbHVlcygpKTsgLy9CVUxMRVQgUE9JTlQgIzYgUkVTT0xVVElPTlxuICAgIH1cbiAgICB0aGlzLl9wb3B1cEZvcm0ucmVzZXQoKTtcbiAgICBzdXBlci5jbG9zZSgpOyAvL2NhbGwgcGFyZW50IGNsb3NlIG1ldGhvZFxuICB9XG4gIHJlbmRlckxvYWRpbmcobG9hZGluZykge1xuICAgIGlmIChsb2FkaW5nKSB7XG4gICAgICB0aGlzLl9wb3B1cEZvcm0ucXVlcnlTZWxlY3RvcignYnV0dG9uW3R5cGU9XCJzdWJtaXRcIl0nKS50ZXh0Q29udGVudCA9XG4gICAgICAgIFwiU2F2aW5nLi4uXCI7XG4gICAgfVxuICAgIHRoaXMuX3BvcHVwRm9ybS5xdWVyeVNlbGVjdG9yKCdidXR0b25bdHlwZT1cInN1Ym1pdFwiXScpLnRleHRDb250ZW50ID0gXCJTYXZlXCI7XG4gIH1cbiAgX2dldElucHV0VmFsdWVzKCkge1xuICAgIGNvbnN0IGlucHV0VmFsdWVzID0ge307XG4gICAgdGhpcy5fcG9wdXBGb3JtSW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgICBpbnB1dFZhbHVlc1tpbnB1dC5pZF0gPSBpbnB1dC52YWx1ZTtcbiAgICB9KTtcblxuICAgIHJldHVybiBpbnB1dFZhbHVlcztcbiAgfVxuXG4gIC8vQlVMTEVUIFBPSU5UICM0IFJFU09MVVRJT05cbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLl9zdWJtaXRUaGlzID0gdGhpcy5fc3VibWl0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5fcG9wdXBGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgdGhpcy5fc3VibWl0VGhpcyk7XG4gIH1cbn1cblxuLy9pbmRleC5qc1xuIiwiaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSBcIi4uL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qc1wiO1xuXG4vKkNvbnN0YW50ICYgdmFyaWFibGUgZGVjbGFyYXRpb24qL1xuY29uc3QgcGFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGFnZVwiKTtcblxuY29uc3QgdmFsaWRhdG9yQ29uZmlnID0ge1xuICBmb3JtU2VsZWN0b3I6IFwiLm1vZGFsX19jb250YWluZXJcIixcbiAgaW5wdXRTZWxlY3RvcjogXCIubW9kYWxfX2lucHV0XCIsXG4gIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiBcIi5tb2RhbF9fc2F2ZS1idXR0b25cIixcbiAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJtb2RhbF9fYnV0dG9uX2Rpc2FibGVkXCIsXG4gIGlucHV0RXJyb3JDbGFzczogXCJtb2RhbF9faW5wdXRfdHlwZV9lcnJvclwiLFxuICBlcnJvckNsYXNzOiBcIm1vZGFsX19lcnJvcl92aXNpYmxlXCIsXG59O1xuXG4vKlByb2ZpbGUgRWRpdGluZyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmNvbnN0IHByb2ZpbGVOYW1lU2VsZWN0b3IgPSBcIi5wcm9maWxlX19uYW1lXCI7XG5jb25zdCBwcm9maWxlRGVzY3JpcHRpb25TZWxlY3RvciA9IFwiLnByb2ZpbGVfX3N1YnRpdGxlXCI7XG5jb25zdCBhdmF0YXJTZWxlY3RvciA9IFwiLnByb2ZpbGVfX2ltYWdlXCI7XG5cbmNvbnN0IHByb2ZpbGUgPSB7XG4gIG5hbWU6IHByb2ZpbGVOYW1lU2VsZWN0b3IsXG4gIGpvYjogcHJvZmlsZURlc2NyaXB0aW9uU2VsZWN0b3IsXG4gIGF2YXRhcjogYXZhdGFyU2VsZWN0b3IsXG59O1xuY29uc3QgY3VycmVudFByb2ZpbGVOYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwcm9maWxlTmFtZVNlbGVjdG9yKTtcbmNvbnN0IGN1cnJlbnRQcm9maWxlRGVzY3JpcHRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICBwcm9maWxlRGVzY3JpcHRpb25TZWxlY3RvclxuKTtcblxuY29uc3QgcHJvZmlsZUVkaXRTZWxlY3RvciA9IFwiLm1vZGFsX3R5cGVfcHJvZmlsZS1lZGl0XCI7XG5jb25zdCBwcm9maWxlRWRpdE1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwcm9maWxlRWRpdFNlbGVjdG9yKTtcbmNvbnN0IHByb2ZpbGVGb3JtID0gZG9jdW1lbnQuZm9ybXMucHJvZmlsZUZvcm07XG5jb25zdCBwcm9maWxlRm9ybVNlbGVjdG9yID0gcHJvZmlsZUZvcm0uY2xhc3NOYW1lO1xuXG4vL2dsb2JhbCB2YWxpZGF0aW9uIHZhcmlhYmxlc1xuXG5jb25zdCBlZGl0UHJvZmlsZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fZWRpdFwiKTtcbmNvbnN0IGVkaXRBdmF0YXJCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2VkaXRJbWFnZUljb25cIik7XG5jb25zdCBwcm9maWxlTmFtZUlucHV0ID0gcHJvZmlsZUVkaXRNb2RhbC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19wcm9maWxlLW5hbWVcIik7XG5jb25zdCBwcm9maWxlRGVzY3JpcHRpb25JbnB1dCA9IHByb2ZpbGVFZGl0TW9kYWwucXVlcnlTZWxlY3RvcihcbiAgXCIubW9kYWxfX3Byb2ZpbGUtZGVzY3JpcHRpb25cIlxuKTtcbmNvbnN0IHNhdmVQcm9maWxlQnV0dG9uID0gcHJvZmlsZUVkaXRNb2RhbC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19zYXZlLWJ1dHRvblwiKTtcblxuY29uc3QgYXZhdGFyRWRpdFNlbGVjdG9yID0gXCIubW9kYWxfdHlwZV9hdmF0YXItZWRpdFwiO1xuY29uc3QgYXZhdGFyRWRpdE1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihhdmF0YXJFZGl0U2VsZWN0b3IpO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IGFkZERlc3RpbmF0aW9uQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19idXR0b25cIik7XG5jb25zdCBhZGREZXN0aW5hdGlvblNlbGVjdG9yID0gXCIubW9kYWxfdHlwZV9hZGQtY2FyZFwiO1xuY29uc3QgYWRkRGVzdGluYXRpb25Nb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYWRkRGVzdGluYXRpb25TZWxlY3Rvcik7XG5cbmNvbnN0IGRlc3RpbmF0aW9uRm9ybVRpdGxlID0gYWRkRGVzdGluYXRpb25Nb2RhbC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX190aXRsZVwiKTtcbmNvbnN0IGRlc3RpbmF0aW9uVGl0bGUgPSBhZGREZXN0aW5hdGlvbk1vZGFsLnF1ZXJ5U2VsZWN0b3IoXG4gIFwiLm1vZGFsX19kZXN0aW5hdGlvbi10aXRsZVwiXG4pO1xuY29uc3QgZGVzdGluYXRpb25JbWFnZVVybCA9IGFkZERlc3RpbmF0aW9uTW9kYWwucXVlcnlTZWxlY3RvcihcbiAgXCIubW9kYWxfX2Rlc3RpbmF0aW9uLWltYWdlLVVSTFwiXG4pO1xuXG5jb25zdCBjYXJkVGVtcGxhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NhcmRcIikuY29udGVudDtcbmNvbnN0IGNhcmRDbGFzc1NlbGVjdG9yID0gXCIuZGVzdGluYXRpb25zLnBhZ2VfX3NlY3Rpb25cIjtcbmNvbnN0IGNhcmRDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNhcmRDbGFzc1NlbGVjdG9yKTtcbmNvbnN0IGluaXRpYWxDYXJkc19vbGQgPSBbXG4gIHtcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QveW9zZW1pdGUuanBnXCIsXG4gICAgbmFtZTogXCJZb3NlbWl0ZSBWYWxsZXlcIixcbiAgfSxcblxuICB7XG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2xha2UtbG91aXNlLmpwZ1wiLFxuICAgIG5hbWU6IFwiTGFrZSBMb3Vpc2VcIixcbiAgfSxcbiAge1xuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9iYWxkLW1vdW50YWlucy5qcGdcIixcbiAgICBuYW1lOiBcIkJhbGQgTW91bnRhaW5zXCIsXG4gIH0sXG4gIHtcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGF0ZW1hci5qcGdcIixcbiAgICBuYW1lOiBcIkxhdGVtYXJcIixcbiAgfSxcbiAge1xuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC92YW5vaXNlLmpwZ1wiLFxuICAgIG5hbWU6IFwiVmFub2lzZSBOYXRpb25hbCBQYXJrXCIsXG4gIH0sXG4gIHtcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGFnby5qcGdcIixcbiAgICBuYW1lOiBcIkxhZ28gZGkgQnJhaWVzXCIsXG4gIH0sXG5dO1xuY29uc3QgY2xvc2VCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tb2RhbF9fY2xvc2UtaWNvblwiKTtcblxuY29uc3QgY2FyZEZvcm0gPSBkb2N1bWVudC5mb3Jtcy5jYXJkRm9ybTtcblxuY29uc3QgcHJldmlld01vZGFsU2VsZWN0b3IgPSBcIi5tb2RhbF90eXBlX3ByZXZpZXdcIjtcbmNvbnN0IHByZXZpZXdNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocHJldmlld01vZGFsU2VsZWN0b3IpO1xuY29uc3QgcHJldmlld01vZGFsSW1hZ2UgPSBwcmV2aWV3TW9kYWwucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9faW1hZ2VcIik7XG5jb25zdCBwcmV2aWV3TW9kYWxDYXB0aW9uID0gcHJldmlld01vZGFsLnF1ZXJ5U2VsZWN0b3IoXG4gIFwiLm1vZGFsX19wcmV2aWV3LWNhcHRpb25cIlxuKTtcblxuY29uc3QgY29uZmlybU1vZGFsU2VsZWN0b3IgPSBcIi5tb2RhbF90eXBlX2RlbGV0ZS1jb25maXJtXCI7XG5jb25zdCBkZWxldGVDb25maXJtTW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbmZpcm1Nb2RhbFNlbGVjdG9yKTtcblxuLy92YWxpZGF0ZSBpbXBvcnQvZXhwb3J0XG5jb25zdCBpbXBvcnRTdGF0dXMgPSBcImNvbnN0YW50cy5qcyBpbXBvcnQgc3VjY2Vzc2Z1bFwiO1xuXG4vL0FQSVxuY29uc3QgdG9rZW4gPSBcIjcxZjViYzM2LTQ3ZmYtNDc0YS1hZmE3LWJmY2M3Mzk5ZDkxZVwiO1xuXG5leHBvcnQge1xuICBwYWdlLFxuICB2YWxpZGF0b3JDb25maWcsXG4gIHByb2ZpbGUsXG4gIGN1cnJlbnRQcm9maWxlTmFtZSxcbiAgY3VycmVudFByb2ZpbGVEZXNjcmlwdGlvbixcbiAgcHJvZmlsZUVkaXRTZWxlY3RvcixcbiAgcHJvZmlsZUVkaXRNb2RhbCxcbiAgcHJvZmlsZUZvcm0sXG4gIHByb2ZpbGVGb3JtU2VsZWN0b3IsXG4gIGVkaXRQcm9maWxlQnV0dG9uLFxuICBlZGl0QXZhdGFyQnV0dG9uLFxuICBwcm9maWxlTmFtZUlucHV0LFxuICBwcm9maWxlRGVzY3JpcHRpb25JbnB1dCxcbiAgc2F2ZVByb2ZpbGVCdXR0b24sXG4gIGF2YXRhckVkaXRTZWxlY3RvcixcbiAgYXZhdGFyRWRpdE1vZGFsLFxuICBhZGREZXN0aW5hdGlvbkJ1dHRvbixcbiAgYWRkRGVzdGluYXRpb25TZWxlY3RvcixcbiAgYWRkRGVzdGluYXRpb25Nb2RhbCxcbiAgZGVzdGluYXRpb25Gb3JtVGl0bGUsXG4gIGRlc3RpbmF0aW9uVGl0bGUsXG4gIGRlc3RpbmF0aW9uSW1hZ2VVcmwsXG4gIGNhcmRUZW1wbGF0ZSxcbiAgY2FyZENsYXNzU2VsZWN0b3IsXG4gIGNhcmRDb250YWluZXIsXG4gIGluaXRpYWxDYXJkc19vbGQsXG4gIGNsb3NlQnV0dG9ucyxcbiAgY2FyZEZvcm0sXG4gIHByZXZpZXdNb2RhbFNlbGVjdG9yLFxuICBwcmV2aWV3TW9kYWwsXG4gIHByZXZpZXdNb2RhbEltYWdlLFxuICBwcmV2aWV3TW9kYWxDYXB0aW9uLFxuICBjb25maXJtTW9kYWxTZWxlY3RvcixcbiAgZGVsZXRlQ29uZmlybU1vZGFsLFxuICBpbXBvcnRTdGF0dXMsXG4gIHRva2VuLFxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcmQge1xuICBjb25zdHJ1Y3RvcihcbiAgICB7IGlzTGlrZWQsIF9pZCwgbGluaywgbmFtZSB9LFxuICAgIGNhcmRTZWxlY3RvcixcbiAgICBoYW5kbGVJbWFnZUNsaWNrLFxuICAgIHJlbW92ZVNlcnZlckNhcmQsXG4gICAgdXBkYXRlU2VydmVyTGlrZVxuICApIHtcbiAgICAvL2NvbnNvbGUubG9nKFwiQ2FyZC5qcyBpbXBvcnRlZCB0byBpbmRleC5qc1wiKTtcbiAgICB0aGlzLmlzTGlrZWQgPSBpc0xpa2VkO1xuICAgIHRoaXMuX2lkID0gX2lkO1xuICAgIHRoaXMuX25hbWUgPSBuYW1lO1xuICAgIHRoaXMuX2xpbmsgPSBsaW5rO1xuXG4gICAgdGhpcy5fY2FyZFNlbGVjdG9yID0gY2FyZFNlbGVjdG9yO1xuICAgIHRoaXMuX2hhbmRsZUltYWdlQ2xpY2sgPSBoYW5kbGVJbWFnZUNsaWNrO1xuICAgIHRoaXMuX3JlbW92ZVNlcnZlckNhcmQgPSByZW1vdmVTZXJ2ZXJDYXJkO1xuICAgIHRoaXMudXBkYXRlU2VydmVyTGlrZSA9IHVwZGF0ZVNlcnZlckxpa2U7XG4gIH1cblxuICBjcmVhdGVDYXJkKCkge1xuICAgIHJldHVybiB0aGlzLmdldFZpZXcoKTtcbiAgfVxuXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcbiAgICAvL2RlZmluZSBjYXJkIGltYWdlXG5cbiAgICB0aGlzLl9jYXJkSW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG4gICAgICB0aGlzLl9oYW5kbGVJbWFnZUNsaWNrKHRoaXMpO1xuICAgIH0pO1xuXG4gICAgLy9ldmVudCBMaXN0ZW5lcnMgZm9yIGxpa2UgaWNvblxuXG4gICAgdGhpcy5fbGlrZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgIGNvbnN0IGNhcmRJZCA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJpbWdcIikuaWQ7XG4gICAgICBjb25zdCBjYXJkTGlrZWQgPSAhKGUudGFyZ2V0LnZhbHVlID09PSBcInRydWVcIik7XG4gICAgICB0aGlzLnVwZGF0ZVNlcnZlckxpa2UoY2FyZExpa2VkLCBjYXJkSWQpO1xuICAgIH0pO1xuXG4gICAgLy9kZWxldGUgYnV0dG9uXG4gICAgdGhpcy5fZGVsZXRlQnV0dG9uID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgIFwiLmRlc3RpbmF0aW9uc19fdHJhc2gtaWNvblwiXG4gICAgKTtcbiAgICB0aGlzLl9kZWxldGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG4gICAgICB0aGlzLl9yZW1vdmVTZXJ2ZXJDYXJkKGUudGFyZ2V0LmNsb3Nlc3QoXCJkaXZcIikucXVlcnlTZWxlY3RvcihcImltZ1wiKS5pZCk7XG4gICAgfSk7XG5cbiAgICAvL0lTU1VFICMgNSBDTElDSyBIQU5ETEVSUyBGT1IgSU1BR0VTIFNIT1VMRCBPTkxZIEJFIElOU0lERSBPRiBUSEUgQ0FSRCBDTEFTU1xuICB9XG5cbiAgaGFuZGxlTGlrZUJ1dHRvbigpIHtcbiAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC50b2dnbGUoXCJkZXN0aW5hdGlvbnNfY2FwdGlvbi1pY29uX3N0eWxlX2xpa2VkXCIpO1xuICB9XG5cbiAgaGFuZGxlRGVsZXRlQnV0dG9uKCkge1xuICAgIC8vY29uc29sZS5sb2codGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcImltZ1wiKSArIFwiIHJlbW92ZWRcIik7XG4gICAgdGhpcy5fY2FyZEVsZW1lbnQucmVtb3ZlKCk7XG5cbiAgICB0aGlzLl9jYXJkRWxlbWVudCA9IG51bGw7XG4gIH1cblxuICBnZXRWaWV3KCkge1xuICAgIHRoaXMuX2NhcmRFbGVtZW50ID0gZG9jdW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NhcmRTZWxlY3RvcilcbiAgICAgIC5jb250ZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZGVzdGluYXRpb25zX19jYXJkXCIpXG4gICAgICAuY2xvbmVOb2RlKHRydWUpO1xuXG4gICAgdGhpcy5fbGlrZUJ1dHRvbiA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBcIi5kZXN0aW5hdGlvbnNfX2NhcHRpb24taWNvblwiXG4gICAgKTtcbiAgICAvL2NvbnNvbGUubG9nKHRoaXMuX2NhcmRFbGVtZW50KTtcbiAgICAvL2NvbnNvbGUubG9nKHRoaXMuX2NhcmRFbGVtZW50LmNsYXNzTmFtZSk7XG5cbiAgICAvL2dldCB0aGUgY2FyZCB2aWV3XG4gICAgLy9zZXQgZXZlbnQgbGlzdGVuZXJzLFxuICAgIC8vcmV0dXJuIHRoZSBjYXJkXG5cbiAgICB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmRlc3RpbmF0aW9uc19fY2FwdGlvbi10ZXh0XCIpLnRleHRDb250ZW50ID1cbiAgICAgIHRoaXMuX25hbWU7XG5cbiAgICB0aGlzLl9jYXJkRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX25hbWUucmVwbGFjZUFsbChcIiBcIiwgXCJfXCIpKTtcblxuICAgIHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZGVzdGluYXRpb25zX19jYXB0aW9uLWljb25cIikudmFsdWUgPVxuICAgICAgdGhpcy5pc0xpa2VkO1xuICAgIGlmIChcbiAgICAgIHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZGVzdGluYXRpb25zX19jYXB0aW9uLWljb25cIikudmFsdWUgPT09XG4gICAgICBcInRydWVcIlxuICAgICkge1xuICAgICAgdGhpcy5oYW5kbGVMaWtlQnV0dG9uKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fY2FyZEltYWdlID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgIFwiLmRlc3RpbmF0aW9uc19fY2FyZC1pbWFnZVwiXG4gICAgKTtcbiAgICB0aGlzLl9jYXJkSW1hZ2UuaWQgPSB0aGlzLl9pZDtcblxuICAgIHRoaXMuX2NhcmRJbWFnZS5zcmMgPSB0aGlzLl9saW5rO1xuXG4gICAgdGhpcy5fY2FyZEltYWdlLmFsdCA9IFwiUGhvdG8gb2YgXCIgKyB0aGlzLl9uYW1lO1xuXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gdGhpcy5fY2FyZEVsZW1lbnQ7XG5cbiAgICByZXR1cm4gY2FyZEVsZW1lbnQ7XG4gIH1cbn1cbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKioqKioqKioqKioqKioqKioqKioqaW5kZXguanMqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8vZnJvbSBzcHJpbnQgOSB0aGVvcnk6IHJlbWVtYmVyIHlvdSBjYW4gdXNlIGZvcm0uZWxlbWVudHMuXCJuYW1lLWF0dHJpYnV0ZVwiIChubyBxdW90ZXMpXG4vL2JyYW5jaDogc3ByaW50XzknXG4vL1widG9rZW5cIjpcIjcxZjViYzM2LTQ3ZmYtNDc0YS1hZmE3LWJmY2M3Mzk5ZDkxZVwiXG4vL0lNUE9SVFNcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuY29uc29sZS5sb2coXCJpbmRleC5qcyBsb2FkZWRcIik7XG5cbmltcG9ydCBcIi4vaW5kZXguY3NzXCI7XG5pbXBvcnQgRm9ybVZhbGlkYXRvciBmcm9tIFwiLi4vY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzXCI7XG5pbXBvcnQgU2VjdGlvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9TZWN0aW9uLmpzXCI7XG5pbXBvcnQgUG9wdXAgZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXAuanNcIjtcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanNcIjtcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qc1wiO1xuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XG5pbXBvcnQgQXBpIGZyb20gXCIuLi9jb21wb25lbnRzL0FwaS5qc1wiOyAvL1NQUklOVCA5XG5pbXBvcnQge1xuICB2YWxpZGF0b3JDb25maWcsXG4gIHByb2ZpbGUsXG4gIHByb2ZpbGVFZGl0U2VsZWN0b3IsXG4gIHByb2ZpbGVFZGl0TW9kYWwsXG4gIGVkaXRQcm9maWxlQnV0dG9uLFxuICBlZGl0QXZhdGFyQnV0dG9uLFxuICBhdmF0YXJFZGl0U2VsZWN0b3IsXG4gIGF2YXRhckVkaXRNb2RhbCxcbiAgYWRkRGVzdGluYXRpb25CdXR0b24sXG4gIGFkZERlc3RpbmF0aW9uU2VsZWN0b3IsXG4gIGFkZERlc3RpbmF0aW9uTW9kYWwsXG4gIGRlc3RpbmF0aW9uVGl0bGUsXG4gIGRlc3RpbmF0aW9uSW1hZ2VVcmwsXG4gIGNhcmRDbGFzc1NlbGVjdG9yLFxuICBpbml0aWFsQ2FyZHNfb2xkLFxuICBwcmV2aWV3TW9kYWxTZWxlY3RvcixcbiAgY29uZmlybU1vZGFsU2VsZWN0b3IsXG4gIGRlbGV0ZUNvbmZpcm1Nb2RhbCxcbiAgaW1wb3J0U3RhdHVzLFxuICB0b2tlbiwgLy9TUFJJTlQgOVxufSBmcm9tIFwiLi4vdXRpbHMvY29uc3RhbnRzLmpzXCI7XG5jb25zb2xlLmxvZyhgJHtpbXBvcnRTdGF0dXN9IC0+IGluZGV4LmpzYCk7XG5cbmltcG9ydCBDYXJkIGZyb20gXCIuLi9jb21wb25lbnRzL0NhcmQuanNcIjtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKkFQSSBSRVFVRVNUUyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8vU1BSSU5UIDlcbmNvbnN0IGFwaSA9IG5ldyBBcGkoe1xuICBiYXNlVXJsOiBcImh0dHBzOi8vYXJvdW5kLWFwaS5lbi50cmlwbGV0ZW4tc2VydmljZXMuY29tL3YxXCIsXG4gIGhlYWRlcnM6IHtcbiAgICBhdXRob3JpemF0aW9uOiB0b2tlbixcbiAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgfSxcbn0pO1xuXG5jb25zdCBkZWxldGVEZXN0aW5hdGlvblBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oe1xuICBwb3B1cFNlbGVjdG9yOiBjb25maXJtTW9kYWxTZWxlY3RvcixcbiAgaGFuZGxlRm9ybVN1Ym1pdDogKGNhcmRJZCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKGNhcmRJZCk7XG4gICAgYXBpLmRlbGV0ZUNhcmQoY2FyZElkKS50aGVuKCgpID0+IHtcbiAgICAgIC8vbmVlZCBhIHdheSB0byB1bmlxdWVseSBpZGVudGlmeSBhbmQgZGVsZXRlIHRoZSBjYXJkIG9uIHRoZSBsb2NhbCBwYWdlXG4gICAgICAvL2RvIG5vdCBpbW1lZGlhdGVseSBoYXZlIHRoZSBjYXJkIGlkIHVudGlsIGl0IGlzIHJldHJpZXZlZCBmcm9tIHRoZSBzZXJ2ZXJcbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBcIiNcXFxcM1wiICsgY2FyZElkLnNsaWNlKDEsIDIpICsgXCIgXCIgKyBjYXJkSWQuc2xpY2UoMiwgY2FyZElkLmxlbmd0aClcbiAgICAgICk7XG5cbiAgICAgIGRvY3VtZW50XG4gICAgICAgIC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgIFwiI1xcXFwzXCIgKyBjYXJkSWQuc2xpY2UoMCwgMSkgKyBcIiBcIiArIGNhcmRJZC5zbGljZSgxLCBjYXJkSWQubGVuZ3RoKVxuICAgICAgICApXG4gICAgICAgIC5jbG9zZXN0KFwiZGl2XCIpXG4gICAgICAgIC5yZW1vdmUoKTtcbiAgICB9KTtcbiAgfSxcbn0pO1xuZGVsZXRlRGVzdGluYXRpb25Qb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xuXG5jb25zdCBjYXJkU2VjdGlvbiA9IG5ldyBTZWN0aW9uKFxuICB7XG4gICAgcmVuZGVyZXI6IChjYXJkT2JqZWN0KSA9PiB7XG4gICAgICBjb25zdCBuZXdFbGVtZW50ID0gbmV3IENhcmQoXG4gICAgICAgIGNhcmRPYmplY3QsXG4gICAgICAgIFwiI2NhcmRcIixcbiAgICAgICAgKGRhdGEpID0+IHtcbiAgICAgICAgICBpbWFnZVBvcHVwLm9wZW4oZGF0YSk7XG4gICAgICAgIH0sXG4gICAgICAgIChjYXJkSWQpID0+IHtcbiAgICAgICAgICBkZWxldGVEZXN0aW5hdGlvblBvcHVwLm9wZW4oXCJcIiwgY2FyZElkKTtcbiAgICAgICAgICAvKlxuXG4gICAgICAgICAgKi9cbiAgICAgICAgfSxcbiAgICAgICAgKGNhcmRMaWtlZCwgY2FyZElkKSA9PiB7XG4gICAgICAgICAgaWYgKGNhcmRMaWtlZCkge1xuICAgICAgICAgICAgYXBpLmxpa2VDYXJkKGNhcmRJZCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgIG5ld0VsZW1lbnQuaGFuZGxlTGlrZUJ1dHRvbigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFwaS5kaXNsaWtlQ2FyZChjYXJkSWQpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICBuZXdFbGVtZW50LmhhbmRsZUxpa2VCdXR0b24oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIHJldHVybiBuZXdFbGVtZW50LmdldFZpZXcoKTtcbiAgICB9LFxuICB9LFxuICBjYXJkQ2xhc3NTZWxlY3RvclxuKTtcblxuY29uc29sZS5sb2coaW5pdGlhbENhcmRzX29sZCk7XG5hcGlcbiAgLmdldENhcmRzKClcbiAgLnRoZW4oKGNhcmRzKSA9PiB7XG4gICAgY29uc3QgaW5pdGlhbENhcmRzID0gY2FyZHM7XG4gICAgcmV0dXJuIGluaXRpYWxDYXJkcztcbiAgfSlcbiAgLnRoZW4oKGluaXRpYWxDYXJkcykgPT4ge1xuICAgIGNhcmRTZWN0aW9uLnJlbmRlckl0ZW1zKGluaXRpYWxDYXJkcyk7XG4gIH0pO1xuXG4vKlxuXG4vL2FwaS5saWtlQ2FyZChcIjY2MjlmOTJmOGJhY2M4MDAxYWVkZjY1YlwiKTtcblxuLy9hcGkuZGlzbGlrZUNhcmQoXCI2NjI5ZjkyZjhiYWNjODAwMWFlZGY2NWJcIik7XG5cbiovXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLy9FVkVOVCBMSVNURU5FUlMgQU5EIENMQVNTIE9QRVJBVElPTlNcbi8qKioqKioqKioqKioqKioqKioqKioqKioqRURJVCBQUk9GSUxFKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5jb25zdCBwcm9maWxlRWRpdFZhbGlkYXRpb24gPSBuZXcgRm9ybVZhbGlkYXRvcihcbiAgdmFsaWRhdG9yQ29uZmlnLFxuICBwcm9maWxlRWRpdE1vZGFsXG4pO1xuXG5wcm9maWxlRWRpdFZhbGlkYXRpb24uZW5hYmxlVmFsaWRhdGlvbigpO1xuXG5hZGREZXN0aW5hdGlvbk1vZGFsLmNsYXNzTGlzdC5hZGQoXCJtb2RhbF90eXBlX2FkZC1kZXN0aW5hdGlvblwiKTtcbmNvbnN0IGRlc3RpbmF0aW9uRm9ybSA9IGFkZERlc3RpbmF0aW9uTW9kYWwucXVlcnlTZWxlY3RvcihcbiAgXCIubW9kYWxfdHlwZV9hZGQtZGVzdGluYXRpb24gLm1vZGFsX19jb250YWluZXJcIlxuKTtcblxuY29uc3QgcHJvZmlsZVVzZXJEYXRhID0gbmV3IFVzZXJJbmZvKFxuICBwcm9maWxlLFxuICBmdW5jdGlvbiBwdWxsU2VydmVyUHJvZmlsZURhdGEoKSB7XG4gICAgLy9TUFJJTlQgOVxuICAgIHJldHVybiBhcGkuZ2V0VXNlckluZm8oKTtcbiAgfSxcbiAgZnVuY3Rpb24gdXBkYXRlU2VydmVyUHJvZmlsZURhdGEocHJvZmlsZURhdGEpIHtcbiAgICBpZiAocHJvZmlsZURhdGEubmFtZSkge1xuICAgICAgYXBpLnVwZGF0ZVByb2ZpbGVJbmZvKHByb2ZpbGVEYXRhKTtcbiAgICB9XG4gIH1cbik7XG5cbmNvbnN0IHByb2ZpbGVQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKHtcbiAgcG9wdXBTZWxlY3RvcjogcHJvZmlsZUVkaXRTZWxlY3RvcixcbiAgaGFuZGxlRm9ybVN1Ym1pdDogKGZvcm1EYXRhKSA9PiB7XG4gICAgZm9ybURhdGEuaW5wdXQxID0gZm9ybURhdGEucHJvZmlsZV90aXRsZTtcbiAgICBkZWxldGUgZm9ybURhdGEucHJvZmlsZV90aXRsZTtcblxuICAgIGZvcm1EYXRhLmlucHV0MiA9IGZvcm1EYXRhLnByb2ZpbGVfZGVzY3JpcHRpb247XG4gICAgZGVsZXRlIGZvcm1EYXRhLnByb2ZpbGVfZGVzY3JpcHRpb247XG4gICAgYXBpXG4gICAgICAudXBkYXRlUHJvZmlsZUluZm8oeyBuYW1lOiBmb3JtRGF0YS5pbnB1dDEsIGFib3V0OiBmb3JtRGF0YS5pbnB1dDIgfSlcbiAgICAgIC50aGVuKFxuICAgICAgICBhcGkuZ2V0VXNlckluZm8oKS50aGVuKChmb3JtRGF0YSkgPT4ge1xuICAgICAgICAgIGZvcm1EYXRhLmlucHV0MSA9IGZvcm1EYXRhLm5hbWU7XG4gICAgICAgICAgZm9ybURhdGEuaW5wdXQyID0gZm9ybURhdGEuYWJvdXQ7XG4gICAgICAgICAgcHJvZmlsZVVzZXJEYXRhLnNldFVzZXJJbmZvKGZvcm1EYXRhKTtcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICAgIC5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgcHJvZmlsZVBvcHVwLnJlbmRlckxvYWRpbmcoZmFsc2UpO1xuICAgICAgfSk7XG4gIH0sXG59KTtcblxuYXBpLmdldFVzZXJJbmZvKCkudGhlbigoZm9ybURhdGEpID0+IHtcbiAgZm9ybURhdGEuaW5wdXQxID0gZm9ybURhdGEubmFtZTtcbiAgZm9ybURhdGEuaW5wdXQyID0gZm9ybURhdGEuYWJvdXQ7XG4gIHByb2ZpbGVVc2VyRGF0YS5zZXRVc2VySW5mbyhmb3JtRGF0YSk7XG59KTtcblxucHJvZmlsZVBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbi8vU1BSSU5UIDlcbmVkaXRQcm9maWxlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICBwcm9maWxlVXNlckRhdGEuZ2V0VXNlckluZm8oKS50aGVuKChyZXMpID0+IHtcbiAgICBwcm9maWxlUG9wdXAub3BlbihyZXMpO1xuICB9KTtcbn0pO1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipFRElUIEFWQVRBUioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8vU1BSSU5UIDkgU3RpbGwgbmVlZCB0byBoYW5kbGUgZm9ybSBzdWJtaXNzaW9uXG5cbmNvbnN0IGF2YXRhckVkaXRWYWxpZGF0aW9uID0gbmV3IEZvcm1WYWxpZGF0b3IoXG4gIHZhbGlkYXRvckNvbmZpZyxcbiAgYXZhdGFyRWRpdE1vZGFsXG4pO1xuXG5hdmF0YXJFZGl0VmFsaWRhdGlvbi5lbmFibGVWYWxpZGF0aW9uKCk7XG5cbmNvbnN0IGVkaXRBdmF0YXJQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKHtcbiAgcG9wdXBTZWxlY3RvcjogYXZhdGFyRWRpdFNlbGVjdG9yLFxuICBoYW5kbGVGb3JtU3VibWl0OiAobmV3QXZhdGFyVXJsKSA9PiB7XG4gICAgYXBpXG4gICAgICAudXBkYXRlUHJvZmlsZUF2YXRhcihuZXdBdmF0YXJVcmwucHJvZmlsZV9hdmF0YXIpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHJldHVybiBhcGkuZ2V0VXNlckluZm8oKTtcbiAgICAgIH0pXG4gICAgICAudGhlbigoZm9ybURhdGEpID0+IHtcbiAgICAgICAgcHJvZmlsZVVzZXJEYXRhLnNldFVzZXJJbmZvKGZvcm1EYXRhKTtcbiAgICAgIH0pXG4gICAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICAgIHByb2ZpbGVQb3B1cC5yZW5kZXJMb2FkaW5nKGZhbHNlKTtcbiAgICAgIH0pO1xuICB9LFxufSk7XG5cbmVkaXRBdmF0YXJQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xuXG5lZGl0QXZhdGFyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICBlZGl0QXZhdGFyUG9wdXAub3BlbigpO1xuICBhdmF0YXJFZGl0VmFsaWRhdGlvbi50b2dnbGVCdXR0b25TdGF0ZSgpO1xufSk7XG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqQUREIERFU1RJTkFUSU9OUyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuY29uc3QgZGVzdGluYXRpb25FZGl0VmFsaWRhdGlvbiA9IG5ldyBGb3JtVmFsaWRhdG9yKFxuICB2YWxpZGF0b3JDb25maWcsXG4gIGFkZERlc3RpbmF0aW9uTW9kYWxcbik7XG5cbmRlc3RpbmF0aW9uRWRpdFZhbGlkYXRpb24uZW5hYmxlVmFsaWRhdGlvbigpO1xuXG4vL0NyZWF0ZSBzZWN0aW9uIGNsYXNzIGZvciBkZXN0aW5hdGlvbiBjYXJkc1xuLypcbmNvbnN0IGNhcmRTZWN0aW9uID0gbmV3IFNlY3Rpb24oXG4gIHtcbiAgICBpdGVtczogaW5pdGlhbENhcmRzLFxuICAgIHJlbmRlcmVyOiAoY2FyZE9iamVjdCkgPT4ge1xuICAgICAgY29uc3QgbmV3RWxlbWVudCA9IG5ldyBDYXJkKGNhcmRPYmplY3QsIFwiI2NhcmRcIiwgKGRhdGEpID0+IHtcbiAgICAgICAgaW1hZ2VQb3B1cC5vcGVuKGRhdGEpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gbmV3RWxlbWVudC5nZXRWaWV3KCk7XG4gICAgfSxcbiAgfSxcbiAgY2FyZENsYXNzU2VsZWN0b3Jcbik7XG4qL1xuXG5jb25zdCBpbWFnZVBvcHVwID0gbmV3IFBvcHVwV2l0aEltYWdlKHsgcG9wdXBTZWxlY3RvcjogcHJldmlld01vZGFsU2VsZWN0b3IgfSk7XG5cbmNvbnN0IGFkZERlc3RpbmF0aW9uUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybSh7XG4gIHBvcHVwU2VsZWN0b3I6IGFkZERlc3RpbmF0aW9uU2VsZWN0b3IsXG4gIGhhbmRsZUZvcm1TdWJtaXQ6IChmb3JtRGF0YSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKGZvcm1EYXRhKTtcbiAgICBjb25zb2xlLmxvZyhmb3JtRGF0YSk7XG4gICAgZm9ybURhdGEubGluayA9IGZvcm1EYXRhLmRlc3RpbmF0aW9uX2ltYWdlX1VSTDtcbiAgICBkZWxldGUgZm9ybURhdGEuZGVzdGluYXRpb25faW1hZ2VfVVJMO1xuXG4gICAgZm9ybURhdGEubmFtZSA9IGZvcm1EYXRhLmRlc3RpbmF0aW9uX3RpdGxlO1xuICAgIGRlbGV0ZSBmb3JtRGF0YS5kZXN0aW5hdGlvbl90aXRsZTtcbiAgICBhcGlcbiAgICAgIC5hZGROZXdDYXJkKGZvcm1EYXRhKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAvL2lmIChyZXMub2spIHtcblxuICAgICAgICByZXR1cm4gYXBpXG4gICAgICAgICAgLmdldENhcmRzKClcbiAgICAgICAgICAudGhlbigoY2FyZHMpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGNhcmRzWzBdLl9pZCk7XG4gICAgICAgICAgICByZXR1cm4gY2FyZHNbMF0uX2lkO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgZm9ybURhdGEuX2lkID0gcmVzO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgIFwiI1xcXFwzXCIgK1xuICAgICAgICAgICAgICAgIGZvcm1EYXRhLl9pZC5zbGljZSgxLCAyKSArXG4gICAgICAgICAgICAgICAgXCIgXCIgK1xuICAgICAgICAgICAgICAgIGZvcm1EYXRhLl9pZC5zbGljZSgyLCBmb3JtRGF0YS5faWQubGVuZ3RoKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNhcmRTZWN0aW9uLmFkZEl0ZW0oZm9ybURhdGEpO1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICAgXCIjXFxcXDNcIiArXG4gICAgICAgICAgICAgICAgZm9ybURhdGEuX2lkLnNsaWNlKDEsIDIpICtcbiAgICAgICAgICAgICAgICBcIiBcIiArXG4gICAgICAgICAgICAgICAgZm9ybURhdGEuX2lkLnNsaWNlKDIsIGZvcm1EYXRhLl9pZC5sZW5ndGgpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgICAvL31cbiAgICAgIH0pXG4gICAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICAgIHByb2ZpbGVQb3B1cC5yZW5kZXJMb2FkaW5nKGZhbHNlKTtcbiAgICAgIH0pO1xuICB9LFxufSk7XG5cbmFkZERlc3RpbmF0aW9uUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuYWRkRGVzdGluYXRpb25CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XG4gIGFkZERlc3RpbmF0aW9uUG9wdXAub3BlbigpO1xuICBkZXN0aW5hdGlvbkVkaXRWYWxpZGF0aW9uLnRvZ2dsZUJ1dHRvblN0YXRlKCk7XG59KTtcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKkxPQUQgSU5JVElBTCBDQVJEUyBPTlRPIFBBR0UqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwaSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAvLyBjb25zdHJ1Y3RvciBib2R5XG5cbiAgICB0aGlzLmJhc2VVcmwgPSBvcHRpb25zLmJhc2VVcmw7XG4gICAgdGhpcy5oZWFkZXJzID0gb3B0aW9ucy5oZWFkZXJzO1xuICB9XG5cbiAgZ2V0VXNlckluZm8oKSB7XG4gICAgcmV0dXJuIGZldGNoKHRoaXMuYmFzZVVybCArIFwiL3VzZXJzL21lXCIsIHsgaGVhZGVyczogdGhpcy5oZWFkZXJzIH0pXG4gICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMub2spIHtcbiAgICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEVycm9yICR7cmVzLnN0YXR1c31gKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICB9KTtcbiAgfVxuXG4gIGdldEluaXRpYWxDYXJkcygpIHtcbiAgICAvLyAuLi5cbiAgfVxuXG4gIGdldENhcmRzKCkge1xuICAgIHJldHVybiBmZXRjaCh0aGlzLmJhc2VVcmwgKyBcIi9jYXJkc1wiLCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycyB9KVxuICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLm9rKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBFcnJvciAke3Jlcy5zdGF0dXN9YCk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgfSk7XG4gIH1cblxuICB1cGRhdGVQcm9maWxlSW5mbyh7IG5hbWUsIGFib3V0IH0pIHtcbiAgICByZXR1cm4gZmV0Y2godGhpcy5iYXNlVXJsICsgXCIvdXNlcnMvbWVcIiwge1xuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXG4gICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIGFib3V0OiBhYm91dCxcbiAgICAgIH0pLFxuICAgIH0pXG4gICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMub2spIHtcbiAgICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEVycm9yICR7cmVzLnN0YXR1c31gKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZVByb2ZpbGVBdmF0YXIoYXZhdGFyKSB7XG4gICAgcmV0dXJuIGZldGNoKHRoaXMuYmFzZVVybCArIFwiL3VzZXJzL21lL2F2YXRhclwiLCB7XG4gICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgYXZhdGFyOiBhdmF0YXIsXG4gICAgICB9KSxcbiAgICB9KVxuICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLm9rKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBFcnJvciAke3Jlcy5zdGF0dXN9YCk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgfSk7XG4gIH1cblxuICBhZGROZXdDYXJkKHsgbmFtZSwgbGluayB9KSB7XG4gICAgcmV0dXJuIGZldGNoKHRoaXMuYmFzZVVybCArIFwiL2NhcmRzXCIsIHtcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIGxpbms6IGxpbmssXG4gICAgICB9KSxcbiAgICB9KVxuICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLm9rKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBFcnJvciAke3Jlcy5zdGF0dXN9YCk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgfSk7XG4gIH1cblxuICBkZWxldGVDYXJkKGNhcmRJZCkge1xuICAgIHJldHVybiBmZXRjaCh0aGlzLmJhc2VVcmwgKyBcIi9jYXJkcy9cIiArIGNhcmRJZCwge1xuICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxuICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgIH0pXG4gICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMub2spIHtcbiAgICAgICAgICByZXR1cm4gcmVzLm9rO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3IgJHtyZXMuc3RhdHVzfWApO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgbGlrZUNhcmQoY2FyZElkKSB7XG4gICAgcmV0dXJuIGZldGNoKHRoaXMuYmFzZVVybCArIFwiL2NhcmRzL1wiICsgY2FyZElkICsgXCIvbGlrZXNcIiwge1xuICAgICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgIH0pO1xuICB9XG5cbiAgZGlzbGlrZUNhcmQoY2FyZElkKSB7XG4gICAgcmV0dXJuIGZldGNoKHRoaXMuYmFzZVVybCArIFwiL2NhcmRzL1wiICsgY2FyZElkICsgXCIvbGlrZXNcIiwge1xuICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxuICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgIH0pO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcbiAgY29uc3RydWN0b3IoeyByZW5kZXJlciB9LCBjbGFzc1NlbGVjdG9yKSB7XG4gICAgLy90aGlzLl9pdGVtcyA9IGl0ZW1zO1xuICAgIHRoaXMucmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICB0aGlzLl9jbGFzc1NlbGVjdG9yID0gY2xhc3NTZWxlY3RvcjtcbiAgICB0aGlzLl9jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNsYXNzU2VsZWN0b3IpO1xuICB9XG5cbiAgcmVuZGVySXRlbXMgPSAoaXRlbXMpID0+IHtcbiAgICBpdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBjb25zdCBuZXdFbGVtZW50ID0gdGhpcy5yZW5kZXJlcihpdGVtKTtcblxuICAgICAgdGhpcy5fYXBwZW5kSXRlbShuZXdFbGVtZW50KTtcbiAgICB9KTtcbiAgfTtcblxuICBhZGRJdGVtID0gKG5ld0l0ZW0pID0+IHtcbiAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZCh0aGlzLnJlbmRlcmVyKG5ld0l0ZW0pKTtcbiAgfTtcblxuICBfYXBwZW5kSXRlbSA9IChlbGVtZW50KSA9PiB7XG4gICAgdGhpcy5fY29udGFpbmVyLmFwcGVuZChlbGVtZW50KTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJJbmZvIHtcbiAgY29uc3RydWN0b3IoXG4gICAgeyBuYW1lLCBqb2IsIGF2YXRhciB9LFxuICAgIHB1bGxTZXJ2ZXJQcm9maWxlRGF0YSxcbiAgICB1cGRhdGVTZXJ2ZXJQcm9maWxlRGF0YVxuICApIHtcbiAgICB0aGlzLm5hbWVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihuYW1lKTtcbiAgICB0aGlzLmpvYkVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGpvYik7XG4gICAgdGhpcy5hdmF0YXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihhdmF0YXIpO1xuICAgIHRoaXMucHVsbFNlcnZlclByb2ZpbGVEYXRhID0gcHVsbFNlcnZlclByb2ZpbGVEYXRhO1xuICAgIHRoaXMudXBkYXRlU2VydmVyUHJvZmlsZURhdGEgPSB1cGRhdGVTZXJ2ZXJQcm9maWxlRGF0YTtcblxuICAgIC8vbW92ZSBpbml0aWFsIHNlcnZlciBwdWxsIHRvIHRoZSBpbmRleCBqcyB0byBwdWxsIGFsbCBzZXJ2ZXIgZGF0YVxuICAgIC8vZm9yIGFsbCBjbGFzc2VzIGF0IG9uY2VcbiAgICBwdWxsU2VydmVyUHJvZmlsZURhdGEoKVxuICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICByZXMuaW5wdXQxID0gcmVzLm5hbWU7XG4gICAgICAgIGRlbGV0ZSByZXMubmFtZTtcbiAgICAgICAgcmVzLmlucHV0MiA9IHJlcy5hYm91dDtcbiAgICAgICAgZGVsZXRlIHJlcy5hYm91dDtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH0pXG4gICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0VXNlckluZm8ocmVzKTtcbiAgICAgIH0pO1xuICAgIC8vY29uc29sZS5sb2coYHRoaXMubmFtZSB2YWx1ZTogJHt0aGlzLm5hbWVFbGVtZW50LnRleHRDb250ZW50fWApO1xuICB9XG5cbiAgZ2V0VXNlckluZm8oKSB7XG4gICAgY29uc3Qgc2VydmVyRGF0YSA9IHRoaXMucHVsbFNlcnZlclByb2ZpbGVEYXRhKCkudGhlbigocmVzKSA9PiB7XG4gICAgICB0aGlzLm5hbWVFbGVtZW50LnRleHRDb250ZW50ID0gcmVzLm5hbWU7XG4gICAgICB0aGlzLmpvYkVsZW1lbnQudGV4dENvbnRlbnQgPSByZXMuYWJvdXQ7XG4gICAgICBjb25zdCBuYW1lVXBkYXRlZCA9IHRoaXMubmFtZUVsZW1lbnQudGV4dENvbnRlbnQ7XG4gICAgICBjb25zdCBqb2JVcGRhdGVkID0gdGhpcy5qb2JFbGVtZW50LnRleHRDb250ZW50O1xuICAgICAgcmV0dXJuIHsgcHJvZmlsZV90aXRsZTogbmFtZVVwZGF0ZWQsIHByb2ZpbGVfZGVzY3JpcHRpb246IGpvYlVwZGF0ZWQgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2VydmVyRGF0YTtcbiAgfVxuXG4gIHNldFVzZXJJbmZvKGZvcm1EYXRhKSB7XG4gICAgaWYgKGZvcm1EYXRhLmlucHV0MSkge1xuICAgICAgdmFyIHsgaW5wdXQxOiBuYW1lRm9ybVZhbCwgaW5wdXQyOiBqb2JGb3JtVmFsIH0gPSBmb3JtRGF0YTtcblxuICAgICAgdGhpcy5uYW1lRWxlbWVudC50ZXh0Q29udGVudCA9IG5hbWVGb3JtVmFsO1xuICAgICAgdGhpcy5qb2JFbGVtZW50LnRleHRDb250ZW50ID0gam9iRm9ybVZhbDtcbiAgICAgIGZvcm1EYXRhLm5hbWUgPSBmb3JtRGF0YS5pbnB1dDE7XG4gICAgICBmb3JtRGF0YS5hYm91dCA9IGZvcm1EYXRhLmlucHV0MjtcbiAgICAgIHRoaXMudXBkYXRlU2VydmVyUHJvZmlsZURhdGEoZm9ybURhdGEpO1xuICAgIH1cbiAgICBpZiAoZm9ybURhdGEuYXZhdGFyKSB7XG4gICAgICB0aGlzLmF2YXRhckVsZW1lbnQuc3JjID0gZm9ybURhdGEuYXZhdGFyO1xuICAgICAgLy90aGlzLnVwZGF0ZVNlcnZlclByb2ZpbGVEYXRhKGZvcm1EYXRhKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhJbWFnZSBleHRlbmRzIFBvcHVwIHtcbiAgY29uc3RydWN0b3IoeyBwb3B1cFNlbGVjdG9yIH0pIHtcbiAgICBzdXBlcih7IHBvcHVwQ2xhc3NTZWxlY3RvcjogcG9wdXBTZWxlY3RvciB9KTtcbiAgICB0aGlzLl9wb3B1cEltYWdlID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJpbWdcIik7XG4gICAgdGhpcy5fcG9wdXBJbWFnZU5hbWUgPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcImZpZ2NhcHRpb25cIik7XG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIC8vQlVMTEVUIFBPSU5UICM5IFJFU09MVVRJT05cbiAgb3Blbih7IF9jYXJkSW1hZ2U6IHsgYWx0LCBzcmMgfSwgX25hbWU6IG5hbWUgfSkge1xuICAgIHRoaXMuX3BvcHVwSW1hZ2UuYWx0ID0gYWx0O1xuICAgIHRoaXMuX3BvcHVwSW1hZ2Uuc3JjID0gc3JjO1xuICAgIHRoaXMuX3BvcHVwSW1hZ2VOYW1lLnRleHRDb250ZW50ID0gbmFtZTtcblxuICAgIHN1cGVyLm9wZW4oKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIkZvcm1WYWxpZGF0b3IiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsImZvcm1FbGVtZW50IiwidGhpcyIsIl9jb25maWciLCJfZm9ybUVsZW1lbnQiLCJjb25zb2xlIiwibG9nIiwic2hvd0lucHV0RXJyb3IiLCJpbnB1dEVsZW1lbnQiLCJlcnJvck1lc3NhZ2VFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImlkIiwiY2xhc3NMaXN0IiwiYWRkIiwiaW5wdXRFcnJvckNsYXNzIiwidGV4dENvbnRlbnQiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsImVycm9yQ2xhc3MiLCJoaWRlSW5wdXRFcnJvciIsInJlbW92ZSIsIl9jaGVja0Zvcm1WYWxpZGl0eSIsIl9pbnB1dEVsZW1lbnRzIiwiZXZlcnkiLCJ2YWxpZGl0eSIsInZhbGlkIiwiY2hlY2tJbnB1dFZhbGlkaXR5IiwidG9nZ2xlQnV0dG9uU3RhdGUiLCJfc3VibWl0QnV0dG9uIiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsImRpc2FibGVkIiwiX3NldEV2ZW50TGlzdGVuZXJzIiwicXVlcnlTZWxlY3RvckFsbCIsImlucHV0U2VsZWN0b3IiLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsImZvckVhY2giLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsImVuYWJsZVZhbGlkYXRpb24iLCJQb3B1cCIsIl9yZWYiLCJwb3B1cENsYXNzU2VsZWN0b3IiLCJfcG9wdXBFbGVtZW50IiwiZG9jdW1lbnQiLCJfY2xvc2VQb3B1cEJ1dHRvbiIsIm9wZW4iLCJfaGFuZGxlRXNjQ2xvc2VCb3VuZCIsImNsb3NlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIl9oYW5kbGVMZWZ0TW91c2VDbG9zZSIsImlzTW9kYWwiLCJ0YXJnZXQiLCJjb250YWlucyIsImJ1dHRvbnMiLCJfaGFuZGxlRXNjQ2xvc2UiLCJrZXkiLCJzZXRFdmVudExpc3RlbmVycyIsImJpbmQiLCJfaGFuZGxlTGVmdE1vdXNlQ2xvc2VCb3VuZCIsInByZXZlbnREZWZhdWx0IiwiUG9wdXBXaXRoRm9ybSIsInBvcHVwU2VsZWN0b3IiLCJoYW5kbGVGb3JtU3VibWl0Iiwic3VwZXIiLCJfcG9wdXBGb3JtSW5wdXRzIiwiQXJyYXkiLCJmcm9tIiwiX3BvcHVwRm9ybSIsIl9oYW5kbGVGb3JtU3VibWl0IiwiZGF0YSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImNhcmRJZCIsImlucHV0IiwidmFsdWUiLCJfc3VibWl0IiwicmVuZGVyTG9hZGluZyIsIl9nZXRJbnB1dFZhbHVlcyIsInJlc2V0IiwibG9hZGluZyIsImlucHV0VmFsdWVzIiwiX3N1Ym1pdFRoaXMiLCJ2YWxpZGF0b3JDb25maWciLCJmb3JtU2VsZWN0b3IiLCJwcm9maWxlTmFtZVNlbGVjdG9yIiwicHJvZmlsZURlc2NyaXB0aW9uU2VsZWN0b3IiLCJwcm9maWxlIiwibmFtZSIsImpvYiIsImF2YXRhciIsInByb2ZpbGVFZGl0U2VsZWN0b3IiLCJwcm9maWxlRWRpdE1vZGFsIiwiZWRpdFByb2ZpbGVCdXR0b24iLCJmb3JtcyIsInByb2ZpbGVGb3JtIiwiY2xhc3NOYW1lIiwiZWRpdEF2YXRhckJ1dHRvbiIsImF2YXRhckVkaXRTZWxlY3RvciIsImF2YXRhckVkaXRNb2RhbCIsImFkZERlc3RpbmF0aW9uQnV0dG9uIiwiYWRkRGVzdGluYXRpb25TZWxlY3RvciIsImFkZERlc3RpbmF0aW9uTW9kYWwiLCJjYXJkQ2xhc3NTZWxlY3RvciIsImNvbnRlbnQiLCJwcmV2aWV3TW9kYWxTZWxlY3RvciIsImNhcmRGb3JtIiwicHJldmlld01vZGFsIiwiY29uZmlybU1vZGFsU2VsZWN0b3IiLCJDYXJkIiwiY2FyZFNlbGVjdG9yIiwiaGFuZGxlSW1hZ2VDbGljayIsInJlbW92ZVNlcnZlckNhcmQiLCJ1cGRhdGVTZXJ2ZXJMaWtlIiwiaXNMaWtlZCIsIl9pZCIsImxpbmsiLCJfbmFtZSIsIl9saW5rIiwiX2NhcmRTZWxlY3RvciIsIl9oYW5kbGVJbWFnZUNsaWNrIiwiX3JlbW92ZVNlcnZlckNhcmQiLCJjcmVhdGVDYXJkIiwiZ2V0VmlldyIsIl9jYXJkSW1hZ2UiLCJfbGlrZUJ1dHRvbiIsIl9jYXJkRWxlbWVudCIsImNhcmRMaWtlZCIsIl9kZWxldGVCdXR0b24iLCJjbG9zZXN0IiwiaGFuZGxlTGlrZUJ1dHRvbiIsInRvZ2dsZSIsImhhbmRsZURlbGV0ZUJ1dHRvbiIsImNsb25lTm9kZSIsInJlcGxhY2VBbGwiLCJzcmMiLCJhbHQiLCJhcGkiLCJvcHRpb25zIiwiYmFzZVVybCIsImhlYWRlcnMiLCJnZXRVc2VySW5mbyIsImZldGNoIiwidGhlbiIsInJlcyIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXMiLCJjYXRjaCIsImVyciIsImVycm9yIiwiZ2V0SW5pdGlhbENhcmRzIiwiZ2V0Q2FyZHMiLCJ1cGRhdGVQcm9maWxlSW5mbyIsImFib3V0IiwibWV0aG9kIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ1cGRhdGVQcm9maWxlQXZhdGFyIiwiYWRkTmV3Q2FyZCIsIl9yZWYyIiwiZGVsZXRlQ2FyZCIsImxpa2VDYXJkIiwiZGlzbGlrZUNhcmQiLCJhdXRob3JpemF0aW9uIiwiZGVsZXRlRGVzdGluYXRpb25Qb3B1cCIsInNsaWNlIiwiY2FyZFNlY3Rpb24iLCJjbGFzc1NlbGVjdG9yIiwicmVuZGVyZXIiLCJfY2xhc3NTZWxlY3RvciIsIl9jb250YWluZXIiLCJyZW5kZXJJdGVtcyIsIml0ZW1zIiwiaXRlbSIsIm5ld0VsZW1lbnQiLCJfYXBwZW5kSXRlbSIsImFkZEl0ZW0iLCJuZXdJdGVtIiwicHJlcGVuZCIsImVsZW1lbnQiLCJhcHBlbmQiLCJjYXJkT2JqZWN0IiwiaW1hZ2VQb3B1cCIsImNhcmRzIiwiaW5pdGlhbENhcmRzIiwicHJvZmlsZVVzZXJEYXRhIiwicHVsbFNlcnZlclByb2ZpbGVEYXRhIiwidXBkYXRlU2VydmVyUHJvZmlsZURhdGEiLCJuYW1lRWxlbWVudCIsImpvYkVsZW1lbnQiLCJhdmF0YXJFbGVtZW50IiwiaW5wdXQxIiwiaW5wdXQyIiwic2V0VXNlckluZm8iLCJwcm9maWxlX3RpdGxlIiwicHJvZmlsZV9kZXNjcmlwdGlvbiIsImZvcm1EYXRhIiwibmFtZUZvcm1WYWwiLCJqb2JGb3JtVmFsIiwicHJvZmlsZURhdGEiLCJwcm9maWxlUG9wdXAiLCJmaW5hbGx5IiwiYXZhdGFyRWRpdFZhbGlkYXRpb24iLCJlZGl0QXZhdGFyUG9wdXAiLCJuZXdBdmF0YXJVcmwiLCJwcm9maWxlX2F2YXRhciIsImRlc3RpbmF0aW9uRWRpdFZhbGlkYXRpb24iLCJfcG9wdXBJbWFnZSIsIl9wb3B1cEltYWdlTmFtZSIsImFkZERlc3RpbmF0aW9uUG9wdXAiLCJkZXN0aW5hdGlvbl9pbWFnZV9VUkwiLCJkZXN0aW5hdGlvbl90aXRsZSJdLCJzb3VyY2VSb290IjoiIn0=